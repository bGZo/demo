## Contents

- Create (c,5)
    - Singleton
      ![image](https://user-images.githubusercontent.com/57313137/175233696-f5ac6fd0-d63e-4946-901e-b696e81bb004.png)
    - Prototype
      ![image](https://user-images.githubusercontent.com/57313137/175233789-633f8fb7-a890-4d70-a03c-200857b3d91e.png)
    - (Simple)Factory
      ![image](https://user-images.githubusercontent.com/57313137/175233865-5cf5e367-e980-4528-9b81-582f2196849a.png)
    - Abstract Factory
      ![image](https://user-images.githubusercontent.com/57313137/175233928-d2df1cf6-28f9-42d0-bf35-df28b4d9ade9.png)
    - Builder
      ![image](https://user-images.githubusercontent.com/57313137/175233997-ee7c1f58-b2a5-48ab-8ec2-baf36f384ca2.png)
- Construction (s, 7)
    - Facade
    - Composite
    - Decorator: 如果只有一个ConcreteComponent类而没有抽象的Component类，
      那么Decorator类可以是ConcreteComponent的一个子类。同样道理，如果只有
      一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，
      而可以把Decorator和ConcreteDecorator的责任合并成一个类
    - Adopter
    - Flyweight
    - Proxy
    - Bridge
- Behavior (v, 11)
    - Template
    - Iterator
    - Chain Of Responsibility
    - Strategy
    - State
    - Mementor
    - Mediator !!!
    - Command
    - Visitor
    - Observer
    - Interpreter
- Principle (6, S.O.L.I.D + LoD)
    - Single Responsibility Principle, 单一职责, 任何修改只有一个原因
    - Open/Closed Principle, 开闭原则, 开放扩展, 关闭修改
    - Liskov Substitution Principle, 里氏替换原则, 父子类可替换
    - Interface Segregation Principle, 接口隔离, 细粒度化接口(灵活Up)
    - Dependency Inversion Principle, 依赖倒置, 高层与底层数据解耦, 只依赖抽象, 不依赖实现
    - Law of Demeter, 迪米特法则, 简单化模块间的通信, 最大程度地隐藏内部逻辑


