<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
 
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="%E4%BA%94%E5%AD%90%E6%A3%8B%E5%A4%A7%E4%BD%9C%E6%88%98_files/bootstrap.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
 
    <!-- Optional theme -->
    <link rel="stylesheet" href="%E4%BA%94%E5%AD%90%E6%A3%8B%E5%A4%A7%E4%BD%9C%E6%88%98_files/bootstrap-theme.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
 
    <!-- LOCAL CSS -->
    <link rel="stylesheet" href="%E4%BA%94%E5%AD%90%E6%A3%8B%E5%A4%A7%E4%BD%9C%E6%88%98_files/game.css"> 

    <title>五子棋大作战</title>
    
<style type="text/css" id="custom-scrollbar-css">* {
    scrollbar-width: thin !important;
    scrollbar-color: unset !important;
}</style></head>

 
<body style="padding-top:65px;" id="" class="vsc-initialized">
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            </div>
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">

                </ul>
                
            </div>
        </div>
    </nav>
    <div class="container" style="margin-bottom:50px;">
        
        <!-- MAIN PAGE CONTENT -->

        <div id="body">
          
            <div class="content_title">
              
            </div>
            <div class="content">
              
            </div>
          
        </div>
      
        
<div class="row">
<h1 id="python-语法迁移">Python 语法迁移</h1>
	<form action="/checkpy/" method="get">
	<input type="hidden" id="csrf_token" value="{&quot;csrfmiddlewaretoken&quot;: &quot;5ukBL6kXhPY9qJjcOKE6GauQh2GCgc7TescSQMrKGLqKSOu5KX8hm6naRLR9ijHk&quot;}">
<p><img src="%E4%BA%94%E5%AD%90%E6%A3%8B%E5%A4%A7%E4%BD%9C%E6%88%98_files/logo_small.png" alt="" width="100%"></p>
<p>你得学习一门新语言。你知道吗？计算机科学家必须是一个语言学习的天才，你得会各种各样的语言，因为你得和计算机这个只会说机器语言的笨蛋打交道。
两个语言不通的人要想接上话，要么你靠近我一点，要么我靠近你一点。让计算机学会自然语言，学会说汉语、蒙古语、英语，目前来看还有些难。所以，包容的人
类啊，你往前走一步吧！为什么要学很多语言呢？首先，机器语言本身有很多的方言，如果你想学机器语言的话，你实际上就得学习好多好多种。并且，机器语言也
太难了，为了降低人类的难度，现在有不少中间人承接翻译的工作，你可以先把你的需求和中间人说，之后让中间人告诉计算机。中间人做了不少努力，他们让自己
的语言越来越靠近人类的需求，现在我们只需要学习中间人的语言就行了。但是中间人们相互竞争，各有各的打算，他们说这是他们的特色，所以中间人的语言也有
好多好多种。</p>
<p>下面我们来介绍这位新的中间人，它叫Python，一条大蟒蛇。想要通过它和计算机交流，你得成为一个Python语者。如果你和其他的中间人打过
交道，那么你会很容易掌握Python语言，事实上所有中间人使用的语言在内在里都是相似的，这是所有中间人的核心理念，这些理念让中间人的工作轻松不
少。如果你深入了解过某个中间人，知道他的理念，那么Python就很简单了。</p>
<p>下面开始把，你需要把中间人请回来，我一般是把它的整个团队都雇回来，这样做起事来会高效不少。<a href="https://www.anaconda.com/products/individual">这是下载链接</a>或仅下载<a href="https://www.python.org/downloads/">解释器</a>。</p>
<p>它的团队比想象的要大得多，毕竟它的能力很强大，多用些资源也是可以接受的。</p>
<p>把它安装到你的计算机上，我不会教你怎么做，你可是计算机科学家！</p>
<p>启动编辑器Spyder，它是个大蜘蛛(Spider)。你可以用两种模式来运行Python程序，命令行的形式和文件的形式，在右边的<code>In[]</code>后面写上你需要的命令，回车你会看到运行的结果。你可以把所有的命令放到一起写在左面的文件里，保存，按那个绿色的按钮，还是在右面你会看到运行的结果。</p>
<p><img src="%E4%BA%94%E5%AD%90%E6%A3%8B%E5%A4%A7%E4%BD%9C%E6%88%98_files/spyder_sm.png" alt="" width="100%"></p>
<p>好了，你知道怎么和中间人说话了，我们来学习Python语言。注意，这不是一个入门的教程，我们假设你已经掌握了一种编程语言，知道中间人的理念，这是一个快速的教程，在我们的预期，你应该在3个小时内掌握这门语言，之后开始后面的工作。</p>
<p>这是一个根据语言特性编写的教程，下面会呈现各个语言特性，请你自己在Spyder上尝试，请把运行结果写在每条语句的后面，不管你是用猜的，还是亲自问了问那条大蟒蛇，你必须把所有的空格都填对，你才有资格进入后面的内容。</p>
<p>在代码里会有注释：</p>
<pre><code class="language-python"><span class="hljs-comment"># 单行注释以井号开始</span>

<span class="hljs-string">""" 多行注释以三个引号开始，
    一般用作文档。
"""</span></code></pre>
<h3 id="基本数据类型与运算符">基本数据类型与运算符</h3>
<p>数字：</p>
<pre><code class="language-python">3  </code></pre>
<p>[Q-1: out]: <input type="text" name="q-1" value="3"></p>
<p>算术运算：</p>
<pre><code class="language-python">1 + 1   </code></pre>
<p>[Q-2: out]: <input type="text" name="q-2" value="2"></p>
<pre><code class="language-python">8 - 1   </code></pre>
<p>[Q-3: out]: <input type="text" name="q-3" value="7"></p>
<pre><code class="language-python">10 * 2  </code></pre>
<p>[Q-4: out]: <input type="text" name="q-4" value="20"></p>
<pre><code class="language-python">35 / 5  </code></pre>
<p>[Q-5: out]: <input type="text" name="q-5" value="7.0"></p>
<p>整数除法有点特别，它会向下取整，无论是正数还是负数都是这样</p>
<pre><code class="language-python">5 // 3</code></pre>
<p>[Q-6: out]: <input type="text" name="q-6" value="1"></p>
<pre><code class="language-python">-5 // 3</code></pre>
<p>[Q-7: out]: <input type="text" name="q-7" value="-2"></p>
<p>整数除法并不要求它的操作数是整数</p>
<pre><code class="language-python">5.0 // 3.0</code></pre>
<p>[Q-8: out]: <input type="text" name="q-8" value="1.0"></p>
<pre><code class="language-python">-5.0 // 3.0</code></pre>
<p>[Q-9: out]: <input type="text" name="q-9" value="-2.0"></p>
<p>普通的除法的结果总是浮点数</p>
<pre><code class="language-python">10.0 / 3  </code></pre>
<p>[Q-10: out]: <input type="text" name="q-10" value="3.3333333333333335"></p>
<p>这是取模运算</p>
<pre><code class="language-python">7 % 3  </code></pre>
<p>[Q-11: out]: <input type="text" name="q-11" value="1"></p>
<p>幂运算(x**y表示x的y次幂)</p>
<pre><code class="language-python">2**3  </code></pre>
<p>[Q-12: out]: <input type="text" name="q-12" value="8"></p>
<p>不要想着优先级和结合律，那是过时的东西，我们现在用括号</p>
<pre><code class="language-python">(1 + 3) * 2  </code></pre>
<p>[Q-13: out]: <input type="text" name="q-13" value="8"></p>
<p>布尔值也是基础类型，注意首字母是大写的</p>
<pre><code class="language-python"><span class="hljs-attribute">True</span> </code></pre>
<p>[Q-14: out]: <input type="text" name="q-14" value="True"></p>
<pre><code class="language-python"><span class="hljs-attribute">False</span> </code></pre>
<p>[Q-15: out]: <input type="text" name="q-15" value="False"></p>
<p>取反用<code>not</code></p>
<pre><code class="language-python"><span class="hljs-keyword">not</span> <span class="hljs-keyword">True</span>   </code></pre>
<p>[Q-16: out]: <input type="text" name="q-16" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">not</span> <span class="hljs-keyword">False</span>  </code></pre>
<p>[Q-17: out]: <input type="text" name="q-17" value="True"></p>
<p>这是布尔运算，<code>and</code>和<code>or</code>必须小写</p>
<pre><code class="language-python"><span class="hljs-keyword">True</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">False</span>  </code></pre>
<p>[Q-18: out]: <input type="text" name="q-18" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">False</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">True</span>   </code></pre>
<p>[Q-19: out]: <input type="text" name="q-19" value="True"></p>
<p><code>True</code>和<code>False</code>不过是<code>1</code>和<code>0</code>的另一种写法而已，不信你试试</p>
<pre><code class="language-python"><span class="hljs-keyword">True</span> + <span class="hljs-keyword">True</span> </code></pre>
<p>[Q-20: out]: <input type="text" name="q-20" value="2"></p>
<pre><code class="language-python"><span class="hljs-attribute">True</span> * <span class="hljs-number">8</span>    </code></pre>
<p>[Q-21: out]: <input type="text" name="q-21" value="8"></p>
<pre><code class="language-python"><span class="hljs-attribute">False</span> - <span class="hljs-number">5</span>   </code></pre>
<p>[Q-22: out]: <input type="text" name="q-22" value="-5"></p>
<p>布尔值的比较操作实际上是在比较他们的数值表示</p>
<pre><code class="language-python"><span class="hljs-attr">0</span> == <span class="hljs-literal">False</span>  </code></pre>
<p>[Q-23: out]: <input type="text" name="q-23" value="True"></p>
<pre><code class="language-python"><span class="hljs-attr">1</span> == <span class="hljs-literal">True</span>   </code></pre>
<p>[Q-24: out]: <input type="text" name="q-24" value="True"></p>
<pre><code class="language-python"><span class="hljs-attr">2</span> == <span class="hljs-literal">True</span>   </code></pre>
<p>[Q-25: out]: <input type="text" name="q-25" value="False"></p>
<pre><code class="language-python"><span class="hljs-deletion">-5 != False </span></code></pre>
<p>[Q-26: out]: <input type="text" name="q-26" value="True"></p>
<p>你可以把整数转换成布尔值</p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(<span class="hljs-number">0</span>)     </code></pre>
<p>[Q-27: out]: <input type="text" name="q-27" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(<span class="hljs-number">4</span>)     </code></pre>
<p>[Q-28: out]: <input type="text" name="q-28" value="True"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(<span class="hljs-number">-6</span>)    </code></pre>
<p>[Q-29: out]: <input type="text" name="q-29" value="True"></p>
<p>你可以直接在数字上做布尔运算，不过结果不会转换成布尔值，去试一下</p>
<pre><code class="language-python"><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>     </code></pre>
<p>[Q-30: out]: <input type="text" name="q-30" value="0"></p>
<pre><code class="language-python"><span class="hljs-number">-5</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>     </code></pre>
<p>[Q-31: out]: <input type="text" name="q-31" value="-5"></p>
<p>想想这个特性有什么用。</p>
<p>你或许会听说过位与，位或(&amp;,|)，Python也知道怎么处理它们，不过千万别用，学C语言的哪些家伙，总犯这样的错误，他们根本不知道位运算只用在数值编码上。</p>
<p>判断相等用两个等号(==)</p>
<pre><code class="language-python"><span class="hljs-attr">1</span> == <span class="hljs-number">1</span>  </code></pre>
<p>[Q-32: out]: <input type="text" name="q-32" value="True"></p>
<pre><code class="language-python"><span class="hljs-attr">2</span> == <span class="hljs-number">1</span>  </code></pre>
<p>[Q-33: out]: <input type="text" name="q-33" value="False"></p>
<p>不相等用!=</p>
<pre><code class="language-python">1 != 1  </code></pre>
<p>[Q-34: out]: <input type="text" name="q-34" value="False"></p>
<pre><code class="language-python">2 != 1  </code></pre>
<p>[Q-35: out]: <input type="text" name="q-35" value="True"></p>
<p>大小比较</p>
<pre><code class="language-python">1 &lt; 10  </code></pre>
<p>[Q-36: out]: <input type="text" name="q-36" value="True"></p>
<pre><code class="language-python">1 &gt; 10  </code></pre>
<p>[Q-37: out]: <input type="text" name="q-37" value="False"></p>
<pre><code class="language-python">2 &lt;= 2  </code></pre>
<p>[Q-38: out]: <input type="text" name="q-38" value="True"></p>
<pre><code class="language-python">2 &gt;= 2  </code></pre>
<p>[Q-39: out]: <input type="text" name="q-39" value="True"></p>
<p>判断是否在一个范围当中</p>
<pre><code class="language-python"><span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span>  </code></pre>
<p>[Q-40: out]: <input type="text" name="q-40" value="True"></p>
<pre><code class="language-python"><span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span> &lt; <span class="hljs-number">2</span>  </code></pre>
<p>[Q-41: out]: <input type="text" name="q-41" value="False"></p>
<p>这是一个紧凑的写法，你去试试</p>
<pre><code class="language-python">1 &lt; 2 &lt; 3  </code></pre>
<p>[Q-42: out]: <input type="text" name="q-42" value="True"></p>
<pre><code class="language-python">2 &lt; 3 &lt; 2  </code></pre>
<p>[Q-43: out]: <input type="text" name="q-43" value="False"></p>
<p><code>is</code>是一个操作符，它会判断两个东西是否“同一”，<code>==</code>会判断两个东西的值是否相等。带程序中“同一”就是这两个东西在相同的内存位置，当然值也是一样的。下面是一个例子，</p>
<pre><code class="language-python"><span class="hljs-attr">a</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]
<span class="hljs-attr">b</span> = a</code></pre>
<pre><code class="language-python"><span class="hljs-attr">b</span> == a            </code></pre>
<p>[Q-44: out]: <input type="text" name="q-44" value="True"></p>
<pre><code class="language-python">b <span class="hljs-keyword">is</span> a            </code></pre>
<p>[Q-45: out]: <input type="text" name="q-45" value="True"></p>
<p>你会发现Python有时候会偷懒，把<code>a</code>赋值给<code>b</code>，就是给<code>a</code>起给别名。下面你会看到这两个操作的不同</p>
<pre><code class="language-python"><span class="hljs-attr">b</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</code></pre>
<pre><code class="language-python">b <span class="hljs-keyword">is</span> a            </code></pre>
<p>[Q-46: out]: <input type="text" name="q-46" value="False"></p>
<pre><code class="language-python"><span class="hljs-attr">b</span> == a            </code></pre>
<p>[Q-47: out]: <input type="text" name="q-47" value="True"></p>
<p>字符串用单引号或双引号括起来</p>
<pre><code class="language-python"><span class="hljs-string">"This is a string."</span>
<span class="hljs-string">'This is also a string.'</span></code></pre>
<p>字符串能够相加，但是我绝不推荐这么做。</p>
<pre><code class="language-python"><span class="hljs-string">"Hello "</span> + <span class="hljs-string">"world!"</span>  </code></pre>
<p>[Q-48: out]: <input type="text" name="q-48" value="'Hello world!'"></p>
<p>文本字符串（不是写在变量里的文本，如果你不知道什么是变量，去找本书来看，我说过这不是一个入门教程）可以不用加号就连接在一起，我也不推荐这么做。</p>
<pre><code class="language-python"><span class="hljs-string">"Hello "</span> <span class="hljs-string">"world!"</span>    </code></pre>
<p>[Q-49: out]: <input type="text" name="q-49" value="'Hello world!'"></p>
<p>字符串可以看作是字符的列表</p>
<pre><code class="language-python"><span class="hljs-string">"This is a string"</span>[<span class="hljs-number">0</span>]  </code></pre>
<p>[Q-50: out]: <input type="text" name="q-50" value="'T'"></p>
<p>你可以得到字符串的长度</p>
<pre><code class="language-python"><span class="hljs-attribute">len</span>(<span class="hljs-string">"This is a string"</span>)  </code></pre>
<p>[Q-51: out]: <input type="text" name="q-51" value="16"></p>
<p><code>.format()</code>可以用来格式化字符串</p>
<pre><code class="language-python"><span class="hljs-string">"{} can be {}"</span>.format(<span class="hljs-string">"Strings"</span>, <span class="hljs-string">"interpolated"</span>)  </code></pre>
<p>[Q-52: out]: <input type="text" name="q-52" value="'Strings can be interpolated'"></p>
<p>你可以在方括号上写编号，这样填充的内容就可以重复</p>
<pre><code class="language-python"><span class="hljs-string">"{0} be nimble, {0} be quick, {0} jump over the {1}"</span>.format(<span class="hljs-string">"Jack"</span>, <span class="hljs-string">"candle stick"</span>) </code></pre>
<p>[Q-53: out]: <input type="text" name="q-53" value="'Jack be nimble, Jack be quick, Jack jump over the candle stick'"></p>
<p>你也可以在括号里写名字，这是Python函数的关键字参数，非常省力，后面我们会再讲一次。</p>
<pre><code class="language-python"><span class="hljs-string">"{name} wants to eat {food}"</span>.format(name=<span class="hljs-string">"Bob"</span>, food=<span class="hljs-string">"lasagna"</span>)  </code></pre>
<p>[Q-54: out]: <input type="text" name="q-54" value="'Bob wants to eat lasagna'"></p>
<p>下面的格式化代码过时了，但是为了向后兼容，在Python3中还能用</p>
<pre><code class="language-python"><span class="hljs-string">"%s can be %s the %s way"</span> % (<span class="hljs-string">"Strings"</span>, <span class="hljs-string">"interpolated"</span>, <span class="hljs-string">"old"</span>)  </code></pre>
<p>[Q-55: out]: <input type="text" name="q-55" value="'Strings can be interpolated the old way'"></p>
<p>你可以用f字符串来格式化文本，这是Python 3.6的新特性</p>
<pre><code class="language-python"><span class="hljs-attr">name</span> = <span class="hljs-string">"Reiko"</span></code></pre>
<pre><code class="language-python"><span class="hljs-attribute">f</span><span class="hljs-string">"She said her name is {name}."</span> </code></pre>
<p>[Q-56: out]: <input type="text" name="q-56" value="'She said her name is Reiko.'"></p>
<p>简单的Python操作也可以写在括号里</p>
<pre><code class="language-python"><span class="hljs-attribute">f</span><span class="hljs-string">"{name} is {len(name)} characters long."</span> </code></pre>
<p>[Q-57: out]: <input type="text" name="q-57" value="'Reiko is 5 characters long.'"></p>
<p><code>None</code>是一个对象</p>
<pre><code class="language-python"><span class="hljs-attribute">None</span>  </code></pre>
<p>[Q-58: out]: <input type="text" name="q-58" value="None"></p>
<p>大多数解释器都不输出None，如果你看到解释器应该输出，但是没有输出的时候，这时它应该输出一个None</p>
<p>不要用<code>==</code>来判断一个对象是否为<code>None</code>，用<code>is</code>来判断</p>
<pre><code class="language-python"><span class="hljs-string">"etc"</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>  </code></pre>
<p>[Q-59: out]: <input type="text" name="q-59" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">None</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>   </code></pre>
<p>[Q-60: out]: <input type="text" name="q-60" value="True"></p>
<p>看看下面的结果</p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(<span class="hljs-number">0</span>)   </code></pre>
<p>[Q-61: out]: <input type="text" name="q-61" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(<span class="hljs-string">""</span>)  </code></pre>
<p>[Q-62: out]: <input type="text" name="q-62" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>([])  </code></pre>
<p>[Q-63: out]: <input type="text" name="q-63" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>({})  </code></pre>
<p>[Q-64: out]: <input type="text" name="q-64" value="False"></p>
<pre><code class="language-python"><span class="hljs-keyword">bool</span>(())  </code></pre>
<p>[Q-65: out]: <input type="text" name="q-65" value="False"></p>
<p><code>None</code>、<code>0</code>空的字符串、列表、字典、元组都是<code>False</code>，除此之外都是<code>True</code></p>
<h3 id="变量和集合">变量和集合</h3>
<p>Python有一个<code>print</code>函数</p>
<pre><code class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"I'm Python. Nice to meet you!"</span>)  </code></pre>
<p>[Q-66:print]: <br><textarea name="q-66" rows="3" cols="20">I'm Python. Nice to meet you!</textarea></p>
<p>默认情况下，<code>print</code>函数会在输出结束的时候再输出一个新行
可以用可选的<code>end</code>参数改变它的行为。</p>
<pre><code class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, World"</span>, end=<span class="hljs-string">"!"</span>)  </code></pre>
<p>[Q-67:print]: <br><textarea name="q-67" rows="3" cols="20">Hello, World!</textarea></p>
<p>最简单的从命令行获取输入的方法</p>
<pre><code class="language-python"><span class="hljs-attr">input_string_var</span> = input(<span class="hljs-string">"Enter some data: "</span>)</code></pre>
<p>输出值是一个字符串，在Python的早期版本中这个函数叫做<code>raw_input()</code></p>
<p>在Python中没有声明语句，只有赋值语句，变量命名规则推荐使用<code>lower_case_with_underscores</code></p>
<pre><code class="language-python"><span class="hljs-attr">some_var</span> = <span class="hljs-number">5</span></code></pre>
<pre><code class="language-python"><span class="hljs-attribute">some_var</span>  </code></pre>
<p>[Q-68: out]: <input type="text" name="q-68" value="5"></p>
<p>访问一个之前没有赋值的变量会产生一个异常，后面再介绍异常处理</p>
<pre><code class="language-python"><span class="hljs-attribute">some_unknown_var</span>  <span class="hljs-comment"># Raises a NameError</span></code></pre>
<p><code>if</code>可以是一个表达式。就像C语言里用一个三元运算符<code>?:</code></p>
<pre><code class="language-python"><span class="hljs-string">"yahoo!"</span> <span class="hljs-keyword">if</span> 3 &gt; 2 <span class="hljs-keyword">else</span> 2  </code></pre>
<p>[Q-69: out]: <input type="text" name="q-69" value="'yahoo!'"></p>
<p>列表用来存储序列</p>
<pre><code class="language-python"><span class="hljs-attr">li</span> = []</code></pre>
<p>序列可以预先填充</p>
<pre><code class="language-python"><span class="hljs-attr">other_li</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</code></pre>
<p><code>append</code>函数可以往列表中追加数据</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.append</span>(1)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-70: out]: <input type="text" name="q-70" value="[1]"></p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.append</span>(2) </code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-71: out]: <input type="text" name="q-71" value="[1, 2]"></p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.append</span>(4) </code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-72: out]: <input type="text" name="q-72" value="[1, 2, 4]"></p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.append</span>(3) </code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-73: out]: <input type="text" name="q-73" value="[1, 2, 4, 3]"></p>
<p><code>pop</code>可以把最后一个元素弹出</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.pop</span>()        </code></pre>
<p>[Q-74: out]: <input type="text" name="q-74" value="3"></p>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-75: out]: <input type="text" name="q-75" value="[1, 2, 4]"></p>
<p>我们再把它加回去</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.append</span>(3)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-76: out]: <input type="text" name="q-76" value="[1, 2, 4, 3]"></p>
<p>你可以像数组一样访问元素</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[0]</span>   </code></pre>
<p>[Q-77: out]: <input type="text" name="q-77" value="1"></p>
<p>这是最后一个元素</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[-1]</span>  </code></pre>
<p>[Q-78: out]: <input type="text" name="q-78" value="3"></p>
<p>如果访问超出边界，那就会产上一个异常</p>
<pre><code class="language-python">li[4]  <span class="hljs-comment"># IndexError</span></code></pre>
<p>你可以用切片语法获得子列表，注意这里会包含开始索引的元素，不包括结束索引的元素，这在数学上叫做“闭开区间”</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[1:3]</span>   </code></pre>
<p>[Q-79: out]: <input type="text" name="q-79" value="[2, 4]"></p>
<p>省略结束索引，向后取到结束</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[2:]</span>    </code></pre>
<p>[Q-80: out]: <input type="text" name="q-80" value="[4, 3]"></p>
<p>省略开始索引，向前取到头</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[:3]</span>    </code></pre>
<p>[Q-81: out]: <input type="text" name="q-81" value="[1, 2, 4]"></p>
<p>再加一个冒号，表示步长，这会返回偶数索引的元素</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[::2]</span>   </code></pre>
<p>[Q-82: out]: <input type="text" name="q-82" value="[1, 4]"></p>
<p>这会得到一个逆序的列表</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[::-1]</span>  </code></pre>
<p>[Q-83: out]: <input type="text" name="q-83" value="[3, 4, 2, 1]"></p>
<p>这是切片的完整语法，<code>li[start:end:step]</code>，你自己想想有什么更神奇的用法</p>
<p>这是完成（一层）深度复制的简单做法</p>
<pre><code class="language-python"><span class="hljs-attr">li2</span> = li[:]</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li2</span> </code></pre>
<p>[Q-84: out]: <input type="text" name="q-84" value="[1, 2, 4, 3]"></p>
<pre><code class="language-python">li2 <span class="hljs-keyword">is</span> li </code></pre>
<p>[Q-85: out]: <input type="text" name="q-85" value="False"></p>
<p>可以用<code>del</code>删除任意元素</p>
<pre><code class="language-python"><span class="hljs-selector-tag">del</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[2]</span></code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-86: out]: <input type="text" name="q-86" value="[1, 2, 3]"></p>
<p>要删除特定值用<code>remove</code>，只删除最先出现的那个</p>
<pre><code class="language-python">li.<span class="hljs-keyword">remove</span>(<span class="hljs-number">2</span>)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-87: out]: <input type="text" name="q-87" value="[1, 3]"></p>
<p>如果列表里不存在要删除的值，会产生一个错误</p>
<pre><code class="language-python">li.<span class="hljs-keyword">remove</span>(<span class="hljs-number">2</span>) <span class="hljs-meta"># ValueError</span></code></pre>
<p>在指定位置插入一个元素，我不告诉你参数的含义</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.insert</span>(1, 2)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-88: out]: <input type="text" name="q-88" value="[1, 2, 3]"></p>
<p>取得特定值在列表中的索引用<code>.index</code>，只返回第一个索引</p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.index</span>(2)  </code></pre>
<p>[Q-89: out]: <input type="text" name="q-89" value="1"></p>
<p>如果这个值不在列表里，会产生一个错误</p>
<pre><code class="language-python">li.index(4) <span class="hljs-comment"># ValueError</span></code></pre>
<p>列表可以相加，相加得到的是新列表，原来的列表不会改变</p>
<pre><code class="language-python"><span class="hljs-attribute">li</span> + other_li  </code></pre>
<p>[Q-90: out]: <input type="text" name="q-90" value="[1, 2, 3, 4, 5, 6]"></p>
<p>列表连接使用<code>extend()</code></p>
<pre><code class="language-python"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.extend</span>(<span class="hljs-selector-tag">other_li</span>)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">li</span> </code></pre>
<p>[Q-91: out]: <input type="text" name="q-91" value="[1, 2, 3, 4, 5, 6]"></p>
<p>检查元素是否在列表中</p>
<pre><code class="language-python">1 <span class="hljs-keyword">in</span> li  </code></pre>
<p>[Q-92: out]: <input type="text" name="q-92" value="True"></p>
<p>取得列表的长度</p>
<pre><code class="language-python">len(li)  </code></pre>
<p>[Q-93: out]: <input type="text" name="q-93" value="6"></p>
<p>元组和列表很像，但是它不可以被修改</p>
<pre><code class="language-python"><span class="hljs-attr">tup</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</code></pre>
<pre><code class="language-python"><span class="hljs-selector-tag">tup</span><span class="hljs-selector-attr">[0]</span>      </code></pre>
<p>[Q-94: out]: <input type="text" name="q-94" value="1"></p>
<pre><code class="language-python">tup[0] = 3  <span class="hljs-comment"># Raises a TypeError</span></code></pre>
<p>只有一个元素的元组需要在这个元素后面加上一个逗号，如果是其他长度就不需要了，即使是一个括号就表示一个空元组</p>
<pre><code class="language-python"><span class="hljs-built_in">type</span>((1))   </code></pre>
<p>[Q-95: out]: <input type="text" name="q-95" value="&lt;class 'int'&gt;"></p>
<pre><code class="language-python"><span class="hljs-built_in">type</span>((1,))  </code></pre>
<p>[Q-96: out]: <input type="text" name="q-96" value="&lt;class 'tuple'&gt;"></p>
<pre><code class="language-python"><span class="hljs-built_in">type</span>(())    </code></pre>
<p>[Q-97: out]: <input type="text" name="q-97" value="&lt;class 'tuple'&gt;"></p>
<p>列表的多数操作都可以用在元组上</p>
<pre><code class="language-python">len(tup)         </code></pre>
<p>[Q-98: out]: <input type="text" name="q-98" value="3"></p>
<pre><code class="language-python"><span class="hljs-attribute">tup</span> + (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)  </code></pre>
<p>[Q-99: out]: <input type="text" name="q-99" value="(1, 2, 3, 4, 5, 6)"></p>
<pre><code class="language-python"><span class="hljs-selector-tag">tup</span><span class="hljs-selector-attr">[:2]</span>          </code></pre>
<p>[Q-100: out]: <input type="text" name="q-100" value="(1, 2)"></p>
<pre><code class="language-python">2 <span class="hljs-keyword">in</span> tup         </code></pre>
<p>[Q-101: out]: <input type="text" name="q-101" value="True"></p>
<p>你可以把元组解包到变量中</p>
<pre><code class="language-python">a, b, c = (1, 2, 3)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">a</span> </code></pre>
<p>[Q-102: out]: <input type="text" name="q-102" value="1"></p>
<pre><code class="language-python"><span class="hljs-attribute">b</span> </code></pre>
<p>[Q-103: out]: <input type="text" name="q-103" value="2"></p>
<pre><code class="language-python"><span class="hljs-attribute">c</span> </code></pre>
<p>[Q-104: out]: <input type="text" name="q-104" value="3"></p>
<p>你可以用更神奇的解包技术</p>
<pre><code class="language-python">a, *b, c = (1, 2, 3, 4)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">a</span> </code></pre>
<p>[Q-105: out]: <input type="text" name="q-105" value="1"></p>
<pre><code class="language-python"><span class="hljs-attribute">b</span> </code></pre>
<p>[Q-106: out]: <input type="text" name="q-106" value="[2, 3]"></p>
<pre><code class="language-python"><span class="hljs-attribute">c</span> </code></pre>
<p>[Q-107: out]: <input type="text" name="q-107" value="4"></p>
<p>不用括号也可以创建元素</p>
<pre><code class="language-python">d, e, f = 4, 5, 6</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">d</span> </code></pre>
<p>[Q-108: out]: <input type="text" name="q-108" value="4"></p>
<pre><code class="language-python"><span class="hljs-attribute">e</span> </code></pre>
<p>[Q-109: out]: <input type="text" name="q-109" value="5"></p>
<pre><code class="language-python"><span class="hljs-attribute">f</span> </code></pre>
<p>[Q-110: out]: <input type="text" name="q-110" value="6"></p>
<p>这就得到了你梦寐以求的交换元素的语句</p>
<pre><code class="language-python">e, d = d, e</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">d</span> </code></pre>
<p>[Q-111: out]: <input type="text" name="q-111" value="5"></p>
<pre><code class="language-python"><span class="hljs-attribute">e</span> </code></pre>
<p>[Q-112: out]: <input type="text" name="q-112" value="4"></p>
<p>字典会存储一个键值对的映射</p>
<pre><code class="language-python"><span class="hljs-attr">empty_dict</span> = {}</code></pre>
<p>字典可以预先填充</p>
<pre><code class="language-python"><span class="hljs-attr">filled_dict</span> = {<span class="hljs-string">"one"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"two"</span>: <span class="hljs-number">2</span>, <span class="hljs-string">"three"</span>: <span class="hljs-number">3</span>}</code></pre>
<p>字典的键必须是不可修改的类型，这是为了把键变成一个整数，这样就可以用快速搜索技术查找元素了</p>
<p>不可修改的类型包括整数、浮点数、字符串和元组，比如这是一个错误</p>
<pre><code class="language-python"><span class="hljs-attr">invalid_dict</span> = {[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]: <span class="hljs-string">"123"</span>}  # TypeError: unhashable type: <span class="hljs-string">'list'</span></code></pre>
<p>Python只要求键是不可修改的类型，对值没有这样的要求</p>
<pre><code class="language-python"><span class="hljs-attr">valid_dict</span> = {(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>):[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]}</code></pre>
<p>用方括号查找值</p>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>[<span class="hljs-string">"one"</span>]  </code></pre>
<p>[Q-113: out]: <input type="text" name="q-113" value="1"></p>
<p>要得到所有的键用<code>.keys()</code>，它返回一个可迭代对象，如果你需要一个列表用<code>list()</code>做转换。后面我们会再次介绍可迭代对象。</p>
<p>注意，Python 3.7以前，下面的代码的结果是不确定的，但是，我们要求你使用Python 3.7，因此答案是唯一的，键返回的顺序就是插入的顺序</p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(filled_dict.keys())  </code></pre>
<p>[Q-114: out]: <input type="text" name="q-114" value="['one', 'two', 'three']"></p>
<p>得到所有的值使用<code>.values()</code></p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(filled_dict.values())  </code></pre>
<p>[Q-115: out]: <input type="text" name="q-115" value="[1, 2, 3]"></p>
<p>判断某个键是否存在</p>
<pre><code class="language-python"><span class="hljs-string">"one"</span> <span class="hljs-keyword">in</span> filled_dict  </code></pre>
<p>[Q-116: out]: <input type="text" name="q-116" value="True"></p>
<pre><code class="language-python">1 <span class="hljs-keyword">in</span> filled_dict      </code></pre>
<p>[Q-117: out]: <input type="text" name="q-117" value="False"></p>
<p>访问不存在的元素，会产生一个错误</p>
<pre><code class="language-python">filled_dict[<span class="hljs-string">"four"</span>]  <span class="hljs-comment"># KeyError</span></code></pre>
<p>使用<code>.get()</code>方法可以避免错误的产生</p>
<pre><code class="language-python">filled_dict.<span class="hljs-keyword">get</span>(<span class="hljs-string">"one"</span>)      </code></pre>
<p>[Q-118: out]: <input type="text" name="q-118" value="1"></p>
<pre><code class="language-python">filled_dict.<span class="hljs-keyword">get</span>(<span class="hljs-string">"four"</span>)     </code></pre>
<p>[Q-119: out]: <input type="text" name="q-119" value="None"></p>
<p>你可以给<code>.get()</code>方法提供一个默认值，当键不存在的时候，会返回这个值</p>
<pre><code class="language-python">filled_dict.<span class="hljs-keyword">get</span>(<span class="hljs-string">"one"</span>, <span class="hljs-number">4</span>)   </code></pre>
<p>[Q-120: out]: <input type="text" name="q-120" value="1"></p>
<pre><code class="language-python">filled_dict.<span class="hljs-keyword">get</span>(<span class="hljs-string">"four"</span>, <span class="hljs-number">4</span>)  </code></pre>
<p>[Q-121: out]: <input type="text" name="q-121" value="4"></p>
<p>如果键值不存在的话，<code>.setdefault()</code>方法会插入新值</p>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>.setdefault(<span class="hljs-string">"five"</span>, 5)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>[<span class="hljs-string">"five"</span>] </code></pre>
<p>[Q-122: out]: <input type="text" name="q-122" value="5"></p>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>.setdefault(<span class="hljs-string">"five"</span>, 6)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>[<span class="hljs-string">"five"</span>] </code></pre>
<p>[Q-123: out]: <input type="text" name="q-123" value="5"></p>
<p>把当前字典和另一个字典合并</p>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>.update({<span class="hljs-string">"four"</span>:4})  </code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span></code></pre>

<p>[Q-124: out]: <input type="text" name="q-124" value="{'one': 1, 'two': 2, 'three': 3, 'five': 5, 'four': 4}"></p>
<p>也可以这样添加新元素</p>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span>[<span class="hljs-string">"four"</span>] = 4</code></pre>
<p>从字典中删除元素</p>
<pre><code class="language-python"><span class="hljs-attribute">del</span> filled_dict[<span class="hljs-string">"one"</span>]</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_dict</span> </code></pre>
<p>[Q-125: out]: <input type="text" name="q-125" value="{'two': 2, 'three': 3, 'five': 5, 'four': 4}"></p>
<p>Python 3.5之后字典也可以用星号解包</p>
<pre><code class="language-python">{<span class="hljs-string">'a'</span>: 1, **{<span class="hljs-string">'b'</span>: 2}}  </code></pre>
<p>[Q-126: out]: <input type="text" name="q-126" value="{'a': 1, 'b': 2}"></p>
<pre><code class="language-python">{<span class="hljs-string">'a'</span>: 1, **{<span class="hljs-string">'a'</span>: 2}}  </code></pre>
<p>[Q-127: out]: <input type="text" name="q-127" value="{'a': 2}"></p>
<p>集合</p>
<pre><code class="language-python"><span class="hljs-attr">empty_set</span> = set()</code></pre>
<p>集合用花括号初始化</p>
<pre><code class="language-python"><span class="hljs-attr">some_set</span> = {<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">some_set</span>  </code></pre>
<p>[Q-128: out]: <input type="text" name="q-128" value="{1, 2, 3, 4}"></p>
<p>集合里的元素需要不可修改，就像是字典的键一样</p>
<pre><code class="language-python"><span class="hljs-attr">invalid_set</span> = {[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>}  # TypeError: unhashable type: <span class="hljs-string">'list'</span>
<span class="hljs-attr">valid_set</span> = {(<span class="hljs-number">1</span>,), <span class="hljs-number">1</span>}</code></pre>
<p>添加一个元素</p>
<pre><code class="language-python">filled_set = some_set
filled_set.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_set</span> </code></pre>
<p>[Q-129: out]: <input type="text" name="q-129" value="{1, 2, 3, 4, 5}"></p>
<p>集合当中不包含重复的元素</p>
<pre><code class="language-python">filled_set.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_set</span> </code></pre>
<p>[Q-130: out]: <input type="text" name="q-130" value="{1, 2, 3, 4, 5}"></p>
<p>集合的交集</p>
<pre><code class="language-python"><span class="hljs-attr">other_set</span> = {<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>}</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">filled_set</span> &amp; other_set  </code></pre>
<p>[Q-131: out]: <input type="text" name="q-131" value="{3, 4, 5}"></p>
<p>并集</p>
<pre><code class="language-python"><span class="hljs-attribute">filled_set</span> | other_set  </code></pre>
<p>[Q-132: out]: <input type="text" name="q-132" value="{1, 2, 3, 4, 5, 6}"></p>
<p>差集</p>
<pre><code class="language-python">{1, 2, 3, 4} - {2, 3, 5}  </code></pre>
<p>[Q-133: out]: <input type="text" name="q-133" value="{1, 4}"></p>
<p>异或（对称差(A-B)|(B-A)）</p>
<pre><code class="language-python">{1, 2, 3, 4} ^ {2, 3, 5}  </code></pre>
<p>[Q-134: out]: <input type="text" name="q-134" value="{1, 4, 5}"></p>
<p>集合的包含</p>
<pre><code class="language-python">{1, 2} &gt;= {1, 2, 3} </code></pre>
<p>[Q-135: out]: <input type="text" name="q-135" value="False"></p>
<pre><code class="language-python">{1, 2} &lt;= {1, 2, 3} </code></pre>
<p>[Q-136: out]: <input type="text" name="q-136" value="True"></p>
<p>元素是否属于集合</p>
<pre><code class="language-python">2 <span class="hljs-keyword">in</span> filled_set   </code></pre>
<p>[Q-137: out]: <input type="text" name="q-137" value="True"></p>
<pre><code class="language-python">10 <span class="hljs-keyword">in</span> filled_set  </code></pre>
<p>[Q-138: out]: <input type="text" name="q-138" value="False"></p>
<h3 id="控制流">控制流</h3>
<pre><code class="language-python"><span class="hljs-attr">some_var</span> = <span class="hljs-number">5</span></code></pre>
<p>这是<code>if</code>语句，缩进是Python最大的特色，使用4个空格，不要使用tab</p>
<pre><code class="language-python"><span class="hljs-keyword">if</span> some_var &gt; 10:
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"some_var is totally bigger than 10."</span>)
<span class="hljs-keyword">elif</span> some_var &lt; 10:    <span class="hljs-comment"># This elif clause is optional.</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"some_var is smaller than 10."</span>)
<span class="hljs-keyword">else</span>:                  <span class="hljs-comment"># This is optional too.</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"some_var is indeed 10."</span>)</code></pre>
<p>[Q-139:print]: <br><textarea name="q-139" rows="3" cols="20">some_var is smaller than 10.</textarea></p>
<p><code>for</code>循环在列表上迭代</p>
<pre><code class="language-python"><span class="hljs-keyword">for</span> animal <span class="hljs-keyword">in</span> [<span class="hljs-string">"dog"</span>, <span class="hljs-string">"cat"</span>, <span class="hljs-string">"mouse"</span>]:
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"{} is a mammal"</span>.format(animal))</code></pre>
<p>[Q-140:print]: <br><textarea name="q-140" rows="3" cols="20">dog is a mammal
cat is a mammal
mouse is a mammal</textarea></p>
<p><code>range(number)</code>返回从<code>0</code>到<code>number-1</code>的迭代器</p>
<pre><code class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4):
    <span class="hljs-built_in">print</span>(i)</code></pre>
<p>[Q-141:print]: <br><textarea name="q-141" rows="3" cols="20">0
1
2
3</textarea></p>
<p><code>range(lower, upper)</code> 返回从<code>lower</code>到<code>upper-1</code>的迭代器</p>
<pre><code class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4, 8):
    <span class="hljs-built_in">print</span>(i)</code></pre>
<p>[Q-142:print]: <br><textarea name="q-142" rows="3" cols="20">4
5
6
7</textarea></p>
<p><code>range(lower, upper, step)</code> 返回从<code>lower</code>到<code>upper-1</code>的迭代器，每步的增量由<code>step</code>给出，默认为<code>1</code></p>
<pre><code class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4, 8, 2):
    <span class="hljs-built_in">print</span>(i)</code></pre>
<p>[Q-143:print]: <br><textarea name="q-143" rows="3" cols="20">4
6</textarea></p>
<p><code>while</code>循环会一直运行直到条件不再满足为止</p>
<pre><code class="language-python">x = 0
<span class="hljs-keyword">while</span> x &lt; 4:
    <span class="hljs-built_in">print</span>(x)
    x += 1  <span class="hljs-comment"># Shorthand for x = x + 1</span></code></pre>
<p>[Q-144:print]: <br><textarea name="q-144" rows="3" cols="20">0
1
2
3</textarea></p>
<p>异常处理</p>
<pre><code class="language-python"><span class="hljs-keyword">try</span>:
    <span class="hljs-comment"># 使用`raise`手动产生错误</span>
    <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"This is an index error"</span>)
<span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:
    <span class="hljs-keyword">pass</span>                 <span class="hljs-comment"># `pass`是一个占位符，什么也不做</span>
<span class="hljs-keyword">except</span> (TypeError, NameError):
    <span class="hljs-keyword">pass</span>                 <span class="hljs-comment"># 你可以处理多种异常</span>
<span class="hljs-keyword">else</span>:                    
    print(<span class="hljs-string">"All good!"</span>)   <span class="hljs-comment"># 如果没有异常的话会执行这段</span>
<span class="hljs-keyword">finally</span>:                 <span class="hljs-comment"># 异常清理区，这段总会被执行</span>
    print(<span class="hljs-string">"We can clean up resources here"</span>)</code></pre>
<p>我们不推荐<code>try/finally</code>的资源清理方案，使用<code>with</code>语句，这是打开文件、网络、数据集的推荐方式</p>
<pre><code class="language-python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"myfile.txt"</span>) <span class="hljs-keyword">as</span> f:
    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
        print(line)</code></pre>
<p>Python中有一个<code>Iterable</code>基类，它表示对象是可迭代的，可迭代对象可以看作一个序列，比如<code>range()</code>会返回一个可迭代的对象</p>
<pre><code class="language-python"><span class="hljs-attr">filled_dict</span> = {<span class="hljs-string">"one"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"two"</span>: <span class="hljs-number">2</span>, <span class="hljs-string">"three"</span>: <span class="hljs-number">3</span>}
<span class="hljs-attr">our_iterable</span> = filled_dict.keys()</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">our_iterable</span>  </code></pre>
<p>[Q-145: out]: <input type="text" name="q-145" value="dict_keys(['one', 'two', 'three'])"></p>
<p>注意到，它不是一个列表，而是一个可迭代的对象</p>
<p>我们可以在它上做循环</p>
<pre><code class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> our_iterable:
    <span class="hljs-built_in">print</span>(i)</code></pre>
<p>[Q-146:print]: <br><textarea name="q-146" rows="3" cols="20">one
two
three</textarea></p>
<p>但是我们不能像真正的序列一样用索引访问</p>
<pre><code class="language-python">our_iterable[1]  <span class="hljs-comment"># Raises a TypeError</span></code></pre>
<p>可迭代的对象可以被转换为迭代器</p>
<pre><code class="language-python"><span class="hljs-attr">our_iterator</span> = iter(our_iterable)</code></pre>
<p>迭代器可以记录当前状态，当我们需要下一个元素时，我们使用<code>next()</code></p>
<pre><code class="language-python"><span class="hljs-keyword">next</span>(our_iterator)  </code></pre>
<p>[Q-147: out]: <input type="text" name="q-147" value="'one'"></p>
<pre><code class="language-python"><span class="hljs-keyword">next</span>(our_iterator)  </code></pre>
<p>[Q-148: out]: <input type="text" name="q-148" value="'two'"></p>
<pre><code class="language-python"><span class="hljs-keyword">next</span>(our_iterator)  </code></pre>
<p>[Q-149: out]: <input type="text" name="q-149" value="'three'"></p>
<p>当所有数据都被返回之后，再使用<code>next()</code>会产生一个异常</p>
<pre><code class="language-python"><span class="hljs-keyword">next</span>(our_iterator)  <span class="hljs-comment"># Raises StopIteration</span></code></pre>
<p>可迭代对象可以转换为列表</p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(filled_dict.keys())  </code></pre>
<p>[Q-150: out]: <input type="text" name="q-150" value="['one', 'two', 'three']"></p>
<h3 id="函数">函数</h3>
<p>用<code>def</code>定义新函数</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span>
    print(<span class="hljs-string">"x is {} and y is {}"</span>.format(x, y))
    <span class="hljs-keyword">return</span> x + y</code></pre>
<p>调用函数</p>
<pre><code class="language-python"><span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)  </code></pre>
<p>[Q-151: out]: <input type="text" name="q-151" value="11"></p>
<p>[Q-152:print]: <br><textarea name="q-152" rows="3" cols="20">x is 5 and y is 6</textarea></p>
<p>参数可以以关键字的形式提供，使用关键字参数，不需要考虑顺序</p>
<pre><code class="language-python"><span class="hljs-keyword">add</span>(y=<span class="hljs-number">6</span>, x=<span class="hljs-number">5</span>)</code></pre>
<p>你的函数可以有可变数量的位置参数</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">varargs</span><span class="hljs-params">(*args)</span>:</span>
    <span class="hljs-keyword">return</span> args</code></pre>
<pre><code class="language-python">varargs(1, 2, 3)  </code></pre>
<p>[Q-153: out]: <input type="text" name="q-153" value="(1, 2, 3)"></p>
<p>你的函数也可以有可变数量的关键字参数</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keyword_args</span><span class="hljs-params">(**kwargs)</span>:</span>
    <span class="hljs-keyword">return</span> kwargs</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">keyword_args</span>(big=<span class="hljs-string">"foot"</span>, loch=<span class="hljs-string">"ness"</span>)  </code></pre>
<p>[Q-154: out]: <input type="text" name="q-154" value="{'big': 'foot', 'loch': 'ness'}"></p>
<p>当然也可以一起用</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_the_args</span><span class="hljs-params">(*args, **kwargs)</span>:</span>
    print(args)
    print(kwargs)

all_the_args(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span>) </code></pre>
<p>[Q-155:print]: <br><textarea name="q-155" rows="3" cols="20">(1, 2)
{'a': 3, 'b': 4}</textarea></p>
<p>参数可以预先填好在元组或者字典中，在函数调用的时候解包就可以了，用<code>*</code>解包元组，用<code>**</code>解包字典</p>
<pre><code class="language-python">args = (1, 2, 3, 4)
kwargs = {<span class="hljs-string">"a"</span>: 3, <span class="hljs-string">"b"</span>: 4}
all_the_args(*args)            <span class="hljs-comment"># 等同于all_the_args(1, 2, 3, 4)</span>
all_the_args(**kwargs)         <span class="hljs-comment"># 等同于all_the_args(a=3, b=4)</span>
all_the_args(*args, **kwargs)  <span class="hljs-comment"># 等同于all_the_args(1, 2, 3, 4, a=3, b=4)</span></code></pre>
<p>用元组返回多个值</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y)</span>:</span>
    <span class="hljs-keyword">return</span> y, x  <span class="hljs-comment"># 返回值是一个元组，括号可加可不加</span>

x = <span class="hljs-number">1</span>
y = <span class="hljs-number">2</span>
x, y = swap(x, y)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">x</span> </code></pre>
<p>[Q-156: out]: <input type="text" name="q-156" value="2"></p>
<pre><code class="language-python"><span class="hljs-attribute">y</span> </code></pre>
<p>[Q-157: out]: <input type="text" name="q-157" value="1"></p>
<p>接收值的括号可加可不加</p>
<pre><code class="language-python">(x, y) = swap(x,y)</code></pre>
<pre><code class="language-python"><span class="hljs-attribute">x</span> </code></pre>
<p>[Q-158: out]: <input type="text" name="q-158" value="1"></p>
<pre><code class="language-python"><span class="hljs-attribute">y</span> </code></pre>
<p>[Q-159: out]: <input type="text" name="q-159" value="2"></p>
<p>变量的可见范围</p>
<pre><code class="language-python">x = <span class="hljs-number">5</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_x</span><span class="hljs-params">(num)</span>:</span>
    x = num   <span class="hljs-comment"># x是局部变量</span>
    print(x)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_global_x</span><span class="hljs-params">(num)</span>:</span>
    <span class="hljs-keyword">global</span> x <span class="hljs-comment"># x是全局变量 x=5</span>
    print(x)
    x = num
    print(x)

set_x(<span class="hljs-number">43</span>) </code></pre>
<p>[Q-160:print]: <br><textarea name="q-160" rows="3" cols="20">43</textarea></p>
<pre><code class="language-python">set_global_x(6)</code></pre>
<p>[Q-161:print]: <br><textarea name="q-161" rows="3" cols="20">5
6</textarea></p>
<pre><code class="language-python"><span class="hljs-attribute">x</span> </code></pre>
<p>[Q-162: out]: <input type="text" name="q-162" value="6"></p>
<p>在Python中函数是一类公民</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_adder</span><span class="hljs-params">(x)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">adder</span><span class="hljs-params">(y)</span>:</span>
        <span class="hljs-keyword">return</span> x + y
    <span class="hljs-keyword">return</span> adder

add_10 = create_adder(<span class="hljs-number">10</span>)</code></pre>
<pre><code class="language-python">add_10(3)   </code></pre>
<p>[Q-163: out]: <input type="text" name="q-163" value="13"></p>
<p>匿名函数</p>
<pre><code class="language-python">(<span class="hljs-keyword">lambda</span> x: x &gt; <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)                  </code></pre>
<p>[Q-164: out]: <input type="text" name="q-164" value="True"></p>
<pre><code class="language-python">(lambda x, y: x <span class="hljs-strong">** 2 + y **</span> 2)(2, 1)  </code></pre>
<p>[Q-165: out]: <input type="text" name="q-165" value="5"></p>
<p>高阶函数</p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add_10, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))          </code></pre>
<p>[Q-166: out]: <input type="text" name="q-166" value="[11, 12, 13]"></p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(max, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]))  </code></pre>
<p>[Q-167: out]: <input type="text" name="q-167" value="[4, 2, 3]"></p>
<pre><code class="language-python"><span class="hljs-built_in">list</span>(filter(lambda x: x &gt; <span class="hljs-number">5</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]))  </code></pre>
<p>[Q-168: out]: <input type="text" name="q-168" value="[6, 7]"></p>
<p>列表推导是<code>map</code>和<code>filter</code>的语法糖，请你自己找出对照关系</p>
<pre><code class="language-python">[add_10(i) for i in [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]         </code></pre>
<p>[Q-169: out]: <input type="text" name="q-169" value="[11, 12, 13]"></p>
<pre><code class="language-python">[x for x in [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>] if x &gt; <span class="hljs-number">5</span>]  </code></pre>
<p>[Q-170: out]: <input type="text" name="q-170" value="[6, 7]"></p>
<p>列表推导也可以用在集合和字典上</p>
<pre><code class="language-python">{x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">'abcddeef'</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">'abc'</span>}  </code></pre>
<p>[Q-171: out]: <input type="text" name="q-171" value="{'d', 'e', 'f'}"></p>
<pre><code class="language-python">{<span class="hljs-attribute">x</span>: x**<span class="hljs-number">2</span> for x in <span class="hljs-built_in">range</span>(5)}  </code></pre>
<p>[Q-172: out]: <input type="text" name="q-172" value="{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"></p>
<h2 id="模块">模块</h2>
<p>引入模块</p>
<pre><code class="language-python"><span class="hljs-keyword">import</span> math</code></pre>
<pre><code class="language-python">math.<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">16</span>)  </code></pre>
<p>[Q-173: out]: <input type="text" name="q-173" value="4.0"></p>
<p>从模块中引入特定函数</p>
<pre><code class="language-python">from math <span class="hljs-keyword">import</span> <span class="hljs-built_in">ceil</span>, <span class="hljs-built_in">floor</span></code></pre>
<pre><code class="language-python"><span class="hljs-built_in">ceil</span>(<span class="hljs-number">3.7</span>)   </code></pre>
<p>[Q-174: out]: <input type="text" name="q-174" value="4"></p>
<pre><code class="language-python"><span class="hljs-built_in">floor</span>(<span class="hljs-number">3.7</span>)  </code></pre>
<p>[Q-175: out]: <input type="text" name="q-175" value="3"></p>
<p>引入所有函数和全局变量；注意这是不推荐的做法</p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *</code></pre>
<p>引入的时候可以起个小名</p>
<pre><code class="language-python"><span class="hljs-keyword">import</span> math <span class="hljs-keyword">as</span> m</code></pre>
<pre><code class="language-python">math.<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">16</span>) == m.<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">16</span>)  </code></pre>
<p>[Q-176: out]: <input type="text" name="q-176" value="True"></p>
<p>Python模块实际上就是一个Python文件，你可以自己写模块，模块的名字就是文件的名字</p>
<p>你可以看看这个模块定义了什么函数或者其他的东西</p>
<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">import</span> math
<span class="hljs-title">dir</span><span class="hljs-params">(math)</span></span></code></pre>
<p>注意如果你当前目录下有一个叫<code>math.py</code>的文件，刚刚的引入语句会引入你自己写的<code>math</code>模块，而不是Python自己的<code>math</code>模块，这是因为自定义的模块的优先级要高于系统的模块。</p>
<h2 id="测试">测试</h2>
<p>以文件形式执行时，当Python读入源文件时，所有的代码都会被执行，<code>__name__</code>测试会判断该模块是否是调用的入口，一般作为单元测试或者主函数</p>
<pre><code class="language-python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>: 
    <span class="hljs-keyword">assert</span> math.sin(math.pi)**<span class="hljs-number">2</span> + math.cos(math.pi)**<span class="hljs-number">2</span> == <span class="hljs-number">1.0</span></code></pre>
    <input type="submit" name="submit" class="btn btn-primary btn-lg btn-block">
    </form>
    </div>

    </div>
    <!-- PAGE LEVEL JAVASCRIPT -->
     
 

</body></html>